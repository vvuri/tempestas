import asyncio
import logging

import yaml
from aiogram import Bot, Dispatcher, executor, types

SECRET_FILE = '../secret.yaml'
token = None
with open(SECRET_FILE) as f:
     secret = yaml.full_load(f)
     token = secret['telegram']['token']

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=token)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")

# –∏–ª–∏ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
# async def cmd_test2(message: types.Message):
#     await message.reply("Test 2")
#
# # –ì–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ...
# dp.register_message_handler(cmd_test2, commands="test2")

@dp.message_handler(commands="test2")
async def cmd_test2(message: types.Message):
    await message.answer("Test 2")

@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π - –≤–º–µ—Å—Ç–æ try
@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")

# if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
executor.start_polling(dp, skip_updates=True)
